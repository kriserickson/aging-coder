{% if site.google_analytics %}
    <script async src="https://www.googletagmanager.com/gtag/js?id={{ site.google_analytics }}"></script>
    <script>
        window.dataLayer = window.dataLayer || [];

        function gtag() {
            dataLayer.push(arguments);
        }

        gtag('js', new Date());

        gtag('config', '{{ site.google_analytics }}');
    </script>
{% endif %}

<!-- Theme toggle script (uses inline SVGs so it doesn't depend on external icon fonts) -->
<script>
    (function () {
        const root = document.documentElement;

        function setTheme(mode) {
            if (mode === 'dark') {
                root.setAttribute('data-theme', 'dark');
            } else if (mode === 'light') {
                root.setAttribute('data-theme', 'light');
            } else {
                root.removeAttribute('data-theme');
            }
        }

        function getSystemTheme() {
            return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        }

        function getQueryTheme() {
            try {
                const qp = new URLSearchParams(window.location.search);
                const t = (qp.get('theme') || '').toLowerCase();
                if (t === 'light' || t === 'dark') { // force without persisting
                    return t;
                }
                if (t === 'auto') { // explicitly request auto
                    return null;
                }
            } catch (e) {}
            return undefined;
        }

        function getSavedTheme() {
            const q = getQueryTheme();
            if (q !== undefined) {
                return q;
            } // honor query override if present
            const saved = localStorage.getItem('theme');
            return saved || getSystemTheme();
        }

        function saveTheme(mode) {
            if (mode) {
                localStorage.setItem('theme', mode);
            } else {
                localStorage.removeItem('theme');
            }
        }

        function svgFor(name) {
            if (name === 'dark') {
                return '<svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false"><path d="M21 12.79A9 9 0 0111.21 3c.12 0 .24 0 .36.01A7 7 0 1021 12.79z" fill="currentColor"/></svg>';
            } else {
                return '<svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false"><path d="M6.76 4.84l-1.8-1.79L3.17 4.84l1.79 1.79 1.8-1.79zM1 13h3v-2H1v2zm10 8h2v-3h-2v3zM17.24 4.84l1.79 1.79 1.79-1.79-1.8-1.79-1.78 1.79zM20 11v2h3v-2h-3zM4.22 19.78l1.79-1.79-1.79-1.79-1.79 1.79 1.79 1.79zM12 6a6 6 0 100 12 6 6 0 000-12zM19.78 19.78l1.79-1.79-1.79-1.79-1.79 1.79 1.79 1.79z" fill="currentColor"/></svg>';
            }
        }

        function updateIcons() {
            document.querySelectorAll('#theme-toggle-icon').forEach(function (icon) {
                icon.innerHTML = svgFor(root.getAttribute('data-theme'));
            });
        }

        function updateTheme() {
            setTheme(getSavedTheme());
            updateIcons();
        }

        document.addEventListener('click', function (e) {
            const t = e.target.closest && e.target.closest('#theme-toggle');
            if (!t) return;

            // Note: clicking always sets an explicit preference, overriding Auto
            const current = root.getAttribute('data-theme');
            if (!current) {
                // Auto -> set opposite of system
                const sys = getSystemTheme();
                const next = (sys === 'dark') ? 'light' : 'dark';
                setTheme(next); saveTheme(next);
            } else if (current === 'light') {
                setTheme('dark'); saveTheme('dark');
            } else {
                setTheme(null); saveTheme(null); // back to Auto
            }
            updateIcons();
        });

        updateTheme();
    })();
</script>
