{% if site.google_analytics %}
    <script async src="https://www.googletagmanager.com/gtag/js?id={{ site.google_analytics }}"></script>
    <script>
        window.dataLayer = window.dataLayer || [];

        function gtag(...args) {
            window.dataLayer.push(args);
        }

        gtag('js', new Date());

        gtag('config', '{{ site.google_analytics }}');
    </script>
{% endif %}

<!-- Theme toggle script (uses inline SVGs so it doesn't depend on external icon fonts) -->
<script>
    (function () {
        const root = document.documentElement;

        function setTheme(mode) {
            if (mode === 'dark') {
                root.setAttribute('data-theme', 'dark');
            } else if (mode === 'light') {
                root.setAttribute('data-theme', 'light');
            } else {
                root.removeAttribute('data-theme');
            }
        }

        function getSystemTheme() {
            return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        }

        function getQueryTheme() {
            try {
                const qp = new URLSearchParams(window.location.search);
                const t = (qp.get('theme') || '').toLowerCase();
                if (t === 'light' || t === 'dark') { // force without persisting
                    return t;
                }
                if (t === 'auto') { // explicitly request auto
                    return null;
                }
            } catch (e) {}
            return undefined;
        }

        function getSavedTheme() {
            const q = getQueryTheme();
            if (q !== undefined) {
                return q;
            } // honor query override if present
            const saved = localStorage.getItem('theme');
            return saved || getSystemTheme();
        }

        function saveTheme(mode) {
            if (mode) {
                localStorage.setItem('theme', mode);
            } else {
                localStorage.removeItem('theme');
            }
        }

        function svgFor(name) {
            if (name === 'dark') {
                return '<svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false"><path d="M21 12.79A9 9 0 0111.21 3c.12 0 .24 0 .36.01A7 7 0 1021 12.79z" fill="currentColor"/></svg>';
            } else {
                return '<svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false"><path d="M6.76 4.84l-1.8-1.79L3.17 4.84l1.79 1.79 1.8-1.79zM1 13h3v-2H1v2zm10 8h2v-3h-2v3zM17.24 4.84l1.79 1.79 1.79-1.79-1.8-1.79-1.78 1.79zM20 11v2h3v-2h-3zM4.22 19.78l1.79-1.79-1.79-1.79-1.79 1.79 1.79 1.79zM12 6a6 6 0 100 12 6 6 0 000-12zM19.78 19.78l1.79-1.79-1.79-1.79-1.79 1.79 1.79 1.79z" fill="currentColor"/></svg>';
            }
        }

        function updateIcons() {
            document.querySelectorAll('#theme-toggle-icon').forEach(function (icon) {
                icon.innerHTML = svgFor(root.getAttribute('data-theme'));
            });
        }

        function updateTheme() {
            setTheme(getSavedTheme());
            updateIcons();
        }

        document.addEventListener('click', function (e) {
            const t = e.target.closest && e.target.closest('#theme-toggle');
            if (!t) return;

            // Determine current explicit theme (null means Auto)
            const current = root.getAttribute('data-theme');

            // Toggle explicitly between 'dark' and 'light'. If Auto (no explicit
            // attribute) then set to the opposite of the system theme.
            if (current === 'dark') {
                // dark -> light
                setTheme('light');
                saveTheme('light');
            } else if (current === 'light') {
                // light -> dark
                setTheme('dark');
                saveTheme('dark');
            } else {
                // Auto -> set to opposite of system
                const sys = getSystemTheme();
                const next = (sys === 'dark') ? 'light' : 'dark';
                setTheme(next);
                saveTheme(next);
            }

            // Update icons after DOM attribute changes
            updateIcons();

            // Mirror data-theme to <body> so any scripts that inspect body also
            // notice the change, and set the CSS color-scheme property so
            // native UI widgets (form controls, scrollbars) can update.
            const applied = root.getAttribute('data-theme');
            if (applied) {
                document.body.setAttribute('data-theme', applied);
                try { document.documentElement.style.setProperty('color-scheme', applied); } catch (e) {}
            } else {
                document.body.removeAttribute('data-theme');
                try { document.documentElement.style.removeProperty('color-scheme'); } catch (e) {}
            }

            // Dispatch an event so other scripts can react to the theme change
            try {
                window.dispatchEvent(new CustomEvent('themechange', { detail: { theme: applied } }));
            } catch (e) {}

            // After theme change, re-apply Mermaid theme if present
            if (window.__initMermaid) {
                try { window.__initMermaid(true); } catch (e) {}
            }
        });

        updateTheme();
    })();

    (function () {
        const hasMermaid = !!document.querySelector('.mermaid');
        if (!hasMermaid) {
            return;
        }

        function currentTheme() {
            const mode = document.documentElement.getAttribute('data-theme');
            // Map our site theme to mermaid themes
            return (mode === 'dark') ? 'dark' : 'default';
        }

        async function loadMermaid() {
            if (window.mermaid) {
                return window.mermaid;
            }
            // Use ESM CDN with a pinned major version for stability
            const mod = await import('https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs');
            window.mermaid = mod.default || mod;
            return window.mermaid;
        }

        window.__initMermaid = async function (rerender = false) {
            const mermaid = await loadMermaid();
            try {
                mermaid.initialize({ startOnLoad: false, theme: currentTheme(), securityLevel: 'strict' });
                if (rerender && mermaid.contentLoaded) {
                    // Try to re-render diagrams when theme changes
                    mermaid.contentLoaded();
                } else {
                    mermaid.run({ querySelector: '.mermaid' });
                }
            } catch (e) {
                // Avoid breaking the page on init errors
                console && console.warn && console.warn('Mermaid init failed:', e);
            }
        };

        // Kick off initial render
        window.__initMermaid();
    })();
</script>
